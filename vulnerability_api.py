"""
Vulnerability Scanner API for AI Code Translator MCP Server

This module provides API endpoints for code vulnerability scanning
that integrate with the MCP server.
"""

import os
import logging
from flask import request, jsonify
from vulnerability_scanner import VulnerabilityScanner

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("vulnerability_api.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Initialize vulnerability scanner
scanner = None

def init_scanner():
    """
    Initialize the vulnerability scanner.
    """
    global scanner
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        logger.error("GEMINI_API_KEY not set in environment variables")
        return False
    
    try:
        scanner = VulnerabilityScanner(api_key)
        logger.info("Vulnerability scanner initialized")
        return True
    except Exception as e:
        logger.error(f"Error initializing vulnerability scanner: {e}")
        return False

def setup_vulnerability_routes(app, require_api_key):
    """
    Set up vulnerability scanner routes on the given Flask app.
    
    Args:
        app: The Flask app to add routes to.
        require_api_key: The API key authentication decorator.
    """
    # Initialize scanner
    if not init_scanner():
        logger.warning("Vulnerability scanner routes will not be functional")
    
    # Scan code for vulnerabilities
    @app.route('/vulnerabilities/scan', methods=['POST'])
    @require_api_key
    def scan_code():
        if not scanner:
            return jsonify({"error": "Vulnerability scanner not initialized"}), 500
        
        data = request.json
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        if 'code' not in data:
            return jsonify({"error": "Missing code in request"}), 400
        
        code = data['code']
        language = data.get('language', 'python')
        scan_depth = data.get('scan_depth', 'full')
        
        # Check if user has permission for full scan
        if scan_depth == 'full' and hasattr(request, 'user_info'):
            account_type = request.user_info.get('account_type', 'free')
            if account_type == 'free':
                scan_depth = 'quick'
                logger.info(f"Downgraded scan to 'quick' for free user")
        
        # Perform scan
        result = scanner.scan_code(code, language, scan_depth)
        
        if result["success"]:
            # Record scan in user history if applicable
            if hasattr(request, 'user_info') and 'user_id' in request.user_info:
                # This would typically call a function to record the scan in the user's history
                logger.info(f"Recorded vulnerability scan for user {request.user_info['user_id']}")
            
            return jsonify(result), 200
        else:
            return jsonify(result), 500
    
    # Get supported languages for vulnerability scanning
    @app.route('/vulnerabilities/languages', methods=['GET'])
    @require_api_key
    def get_supported_languages():
        if not scanner:
            return jsonify({"error": "Vulnerability scanner not initialized"}), 500
        
        # Get supported languages from the scanner
        languages = list(scanner.vulnerability_patterns.keys())
        
        return jsonify({
            "success": True,
            "languages": languages
        }), 200
    
    logger.info("Vulnerability scanner routes set up")
    return app
